[project]
name = "hidebound"
version = "0.31.5"
description = "A MLOps framework for generating ML assets and metadata."
authors = [
    {name = "Alex Braun", email = "alexander.g.braun@gmail.com"},
]
readme = "README.md"
license = "MIT"
keywords = [
    "ephemeral", "database", "asset", "assetstore", "datastore", "vfx", "mlops",
    "ml", "machine-learning", "data"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "boto3",
    "botocore",
    "click>=8.1.3",
    "dash-cytoscape>=0.2.0",
    "dash",
    "dask_gateway",
    "dask[dataframe]>=2024.3.1",
    "distributed",
    "flasgger",
    "flask_healthz",
    "flask-healthz",
    "flask",
    "girder-client",
    "jinja2>=3.0",
    "json_logging",
    "lunchbox",
    "numpy",
    "pandas",
    "pandasql",
    "pyjson5",
    "pyparsing>=3.0.1",
    "pyyaml",
    "requests",
    "rolling-pin",
    "schematics",
    "scikit-image",
    "sqlalchemy",
    "werkzeug",
    "wrapt",
]

[project.urls]
repository = "https://github.com/theNewFlesh/hidebound"
documentation = "https://thenewflesh.github.io/hidebound"

[project.scripts]
hidebound = "hidebound.command:main"

[tool.pdm.dev-dependencies]
lab = [
    "cufflinks",
    "dask-labextension>=6.0.0",
    "jupyterlab-git>=0.39.3",
    "jupyterlab-henanigans>=0.2.2",
    "jupyterlab-sublime",
    "jupyterlab",
]
dev = [
    "m2r2",
    "sphinx-autodoc-typehints>=1.22",
    "sphinx-rtd-theme",
    "sphinx>=5.3.0",
    "sphinxcontrib-jquery>=4.1",
    "toml>=0.10.2",
]
test = [
    "flake8",
    "moto[s3]>=5.0.4",
    "mypy",
    "percy",
    "plotly",
    "pytest-cov",
    "pytest-forked",
    "pytest-rerunfailures",
    "pytest-xdist",
    "pytest",
    "tox",
    "types-PyYAML",
    "types-requests",
]

[tool.pytest.ini_options]
cache_dir = "/home/ubuntu/.pytest_cache"
filterwarnings = [
    "ignore::UserWarning",
    "ignore::FutureWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*before_app_first_request:",
    "ignore:.*deprecated function _options:",
    "ignore:.*deprecated function _valid_input_keys:",
    "ignore:.*deprecated function _validator_functions:",
    "ignore:.*deprecated function fields:",
    "ignore:.*Failed to reconnect to scheduler",
    "ignore:.*imp module is deprecated:",
    "ignore:.*is not.*with a literal. Did you mean.*!=:",
    "ignore:.*low contrast image:",
    "ignore:.*make_current is deprecated:",
    "ignore:.*Meta is not valid:",
    "ignore:.*Port.*is already in use:",
    "ignore:.*The --rsyncdir command line argument:",
    "ignore:.*the imp module is deprecated:",
    "ignore:.*The setup method 'record_once':",
    "ignore:.*The setup method 'record':",
    "ignore:.*There is no current event loop:",
    "ignore:.*will attempt to set the values inplace instead.*:",
]
markers = [
    "flaky:Flaky test",
]

[tool.coverage.report]
show_missing = true
omit = [
    "*/__init__.py",
    "*/*_test_base.py",
    "*/*_test.py",
    "*/*_tests.py",
    "*/cli.py",
    "*/command.py",
    "*/mock_*.py",
    "*/conftest.py",
]

[tool.mypy]
cache_dir = "/home/ubuntu/.mypy_cache"
python_version = "3.10"
ignore_missing_imports = true
warn_no_return = false
pretty = true
warn_unused_ignores = true

[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"
